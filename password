#!/usr/bin/env bash

# start of global data
random_int=0
random_char='a'
random_special_char='!'
declare -a password
# end of global data

# helper int function w/ no parameters, picks random number from 0 to 9 (inclusive)
pick_random_int() {
    random_int=$(shuf -i 0-9 -n 1)    
}

# helper char function, picks random letter
# if first arg is true, then returns upper case char
pick_random_char() {
    local i=$(shuf -i 1-26 -n 1)   # picks random number from 1 to 26
    lower_case=(a b c d e f g h i j k l m n o p q r s t u v w x y z)
    upper_case=(A B C D E F G H I J K L M N O P Q R S T U V W X Y Z)
    if [[ $1 -eq 1 ]]; then # if true, pick lower case char
        random_char=${lower_case[i]}
    else    # else pick upper case char
        random_char=${upper_case[i]}
    fi
}

# helper char function, picks random special character
pick_random_special_char() {
    special_char=('!' '$' '?' '#')
    local i=$(shuf -i 1-4 -n 1)
    random_special_char=${special_char[i]}
}

# creates password
generate_password() {
    local another_random_int=$(shuf -i 0-1 -n 1) # random integer, either 0 or 1
    pick_random_char $another_random_int
    password+=$random_char

    pick_random_int
    password+=$random_int

    pick_random_int
    password+=$random_int

    pick_random_int
    password+=$random_int

    pick_random_int
    password+=$random_int

    pick_random_int
    password+=$random_int

    local another_random_int=$(shuf -i 0-1 -n 1)
    pick_random_char $another_random_int
    password+=$random_char

    local another_random_int=$(shuf -i 0-1 -n 1)
    pick_random_char $another_random_int
    password+=$random_char

    pick_random_special_char
    password+=$random_special_char
}

while getopts ":c:hf:" option; do
    case $option in 
        c)  # create password
            # storing password in passwords.txt
            if grep -q "$2" passwords.txt; then
                echo -e "\tError: duplicate label called '$2' found"
                exit 1
            fi

            generate_password
            echo -e "\t$2 Password: ${password[@]}"
            echo -e "$2,${password[@]}" >> passwords.txt   # writing password to passwords.txt

            # creating file for where all passwords are stored
            if [[ ! -f "passwords.txt" ]]; then   # if cannot find passwords.txt, create and set permissions
                touch passwords.txt
                chmod u+r passwords.txt
            else    # else ensure permissions are set to prevent tampering
                chmod u+r passwords.txt # change later
            fi
            ;;
        h)  # help     
            echo -e "\tGenerate or locate password"
            echo
            echo -e "\tSyntax: password [-chf]"
            echo -e "\toptions:"
            echo -e "\tc    Create password with some hash algorithm"
            echo -e "\th    Display help page"
            echo -e "\tf    Find previously generated password"
            ;;
        f)  # finding password
            while IFS= read -r line; do
                if grep -q "$2" passwords.txt; then
                    echo -e "\t$2 Password: $(cut -d "," -f2 <<< $line)"
                    break
                fi
            done < "/Users/kids/Desktop/bash/passwords.txt"
            ;;
        *)  # default
            echo -e "\tpassword: illegal option -- "${1:1}""
            echo -e "\tusage: password [-c] [LABEL]"
            echo -e "\tusage: password [-hf]"

            echo -e "\n\tExamples:"
            echo -e "\tpassword -c Facebook        Generates password with 'Facebook' label"
            echo -e "\tpassword -h                 Display help"
            echo -e "\tpassword -f Facebook        Returns password with 'Facebook' label"
            exit 1
            ;;
        esac
done
