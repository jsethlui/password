#!/usr/bin/env bash

# start of global data
random_int=0
random_char='a'
random_special_char='!'
declare -a password
# end of global data

# helper int function w/ no parameters, picks random number from 0 to 9
set_random_int() {
    random_int=$(shuf -i 0-9 -n 1)    
}

# helper char function, picks random letter
# if first arg is true, then returns upper case char
set_random_char() {
    local i=$(shuf -i 1-26 -n 1)   # picks random number from 1 to 26
    lower_case=(a b c d e f g h i j k l m n o p q r s t u v w x y z)
    upper_case=(A B C D E F G H I J K L M N O P Q R S T U V W X Y Z)
    if [[ $1 -eq 1 ]]; then # if true, pick lower case char
        random_char=${lower_case[i]}
    else    # else pick upper case char
        random_char=${upper_case[i]}
    fi
}

# helper char function, picks random special character
set_random_special_char() {
    special_char=('!' '$' '?' '#')
    local i=$(shuf -i 1-4 -n 1)
    random_special_char=${special_char[i]}
}

# creates password
generate_password() {
    local another_random_int=$(shuf -i 0-1 -n 1) # random integer, either 0 or 1
    set_random_char $another_random_int
    password+=$random_char

    for (( i=0; i<5; i++ )); do
        set_random_int
        password+=$random_int
    done

    for (( i=0; i<2; i++ )); do
        local another_random_int=$(shuf -i 0-1 -n 1)
        set_random_char $another_random_int
        password+=$random_char
    done

    set_random_special_char
    password+=$random_special_char
}

# creating file that stores all passwords
if [[ ! -f "passwords.txt" ]]; then   # if cannot find passwords.txt, create and set permissions
    touch passwords.txt
    chmod u-w passwords.txt
else    # else ensure permissions are set to prevent tampering
    chmod u-w passwords.txt 
fi

path=$(find . -name passwords.txt)  # getting path to passwords.txt
max_lines=$(wc -l < passwords.txt | awk '{ print $1 }')     # max lines of password.txt
line_count=1

while getopts ":c:hf:ar:R" option; do
    case $option in 
        c)  # create password            
            create_flag=1
            ;;
        h)  # help     
            help_flag=1
            ;;
        f)  # finding password
            find_flag=1
            ;;
        a)  # read all passwords
            read_all_flag=1
            ;;
        r) # remove label and password
            remove_flag=1
            ;;
        R) # force remove all passwords
            force_remove_flag=1
            ;;
        *)  # default
            error_flag=1
            ;;
        esac
done

 # if create flag set
if [[ create_flag -eq 1 ]]; then
    # checking for duplicate labels in passwords.txt
    # if duplicate label found, print error
    # else do nothing
    case `grep "$2" passwords.txt > /dev/null; echo $?` in
        0) # success, no duplicate labels found in file
            echo -e "\tError: duplicate label called '$2' found"
            exit 1
            ;;
        1) # error, found duplicate in file
            generate_password
            echo -e "\t$2 Password: ${password[@]}"
            echo -e "$2,${password[@]}" >> passwords.txt   # writing password to passwords.txt
            ;;
        *)
            echo "\tError: type unknown"
            exit 1
            ;;
    esac
fi

# if help flag set
if [[ help_flag -eq 1 ]]; then
    echo -e "\tGenerate or locate password"
    echo
    echo -e "\tSyntax: password [-chfarR] [LABEL]"
    echo -e "\toptions:"
    echo -e "\tc [LABEL]    Create password for [LABEL]"
    echo -e "\th            Display help page"
    echo -e "\tf [LABEL]    Find previously generated password for [LABEL]"
    echo -e "\ta            Read all passwords"
    echo -e "\tr [LABEL]    Remove password for [LABEL]"
    echo -e "\tR            Force remove file that saves all passwords"
fi

# if find flag set 
if [[ find_flag -eq 1 ]]; then
    while IFS= read -r line; do
        if [[ "$line" == *"$2"* ]]; then
            current_label=$(cut -d "," -f1 <<< $line)   # gets substring before comma
            current_pass=$(cut -d "," -f2 <<< $line)    # gets substring after comma
            echo -e "\t$current_label Password: $current_pass"
            break
        elif [[ line_count -eq max_lines ]]; then
            echo -e "\tError: cannot find password for label '$2'"
            exit 1
        fi
        line_count=$((line_count+1))
    done < $path
fi

# if all flag set
if [[ read_all_flag -eq 1 ]]; then
    while IFS= read -r line; do
        current_label=$(cut -d "," -f1 <<< $line)   # gets substring before comma
        current_pass=$(cut -d "," -f2 <<< $line)    # gets substring after comma
        printf "\t%-10s %s\n" $current_label $current_pass
    done < $path
fi

# if remove flag set
if [[ remove_flag -eq 1 ]]; then
    while IFS= read -r line; do
        if [[ "$line" == *"$2"* ]]; then
            grep -v "$line" passwords.txt > passwords_copy.txt; mv passwords_copy.txt passwords.txt
            echo -e "\tSuccessfully removed password for '$2'"
            break;
        elif [[ line_count -eq max_lines ]]; then    # TO DO: FIX
            echo -e "\tError: cannot find and remove label '$2'"
            exit 1
        fi
        line_count=$((line_count+1))  # line count
    done < $path
fi

# if force remove flag set 
if [[ force_remove_flag -eq 1 ]]; then
    echo -en "\tForce remove passwords.txt file [y/n]: "
    read user_input
    if [[ $user_input == "y" ]]; then   # if user input is yes,
        case `find . -name 'passwords.txt' > /dev/null; echo $?` in
            0) # cannot locate passwords.txt
                rm passwords.txt
                echo -e "\n\tSuccessfully removed all passwords"
                ;;
            1)  # successfully able to find passwords.txt
                echo -e "\n\tError: cannot find passwords.txt"
                exit 1
                ;;
            *)  # default error
                echo -e "\tError: type unknown"
                exit 1
                ;;
        esac
    elif [[ $user_input == "n" ]]; then
        echo -e "\n\tExiting..."
    else
        echo -e "\n\tError: '$user_input' is not a valid response"
        exit 1
    fi
fi

# if error flag set
if [[ error_flag -eq 1 ]]; then
    echo -e "\tpassword: illegal option -- "$@""
    echo -e "\tusage: password [-c] [LABEL]"
    echo -e "\tusage: password [-hf]"

    echo -e "\n\tExamples:"
    echo -e "\tpassword -c Facebook        Generates password with 'Facebook' label"
    echo -e "\tpassword -h                 Display help"
    echo -e "\tpassword -f Facebook        Returns password with 'Facebook' label"
    exit 1
fi
exit 0